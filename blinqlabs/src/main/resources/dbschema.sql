if not exists (select * from sysobjects where name='ACCOUNT_ROLE' and xtype='U')
CREATE TABLE ACCOUNT_ROLE (
	ID int IDENTITY(1,1) NOT NULL,
    TX_ROLE VARCHAR(255) NOT NULL,
    ID_PRIORITY INT NOT NULL,
    TS_CREATE VARCHAR(30),
	PRIMARY KEY (ID)
);

IF NOT EXISTS(SELECT * FROM ACCOUNT_ROLE WHERE ID=1)
INSERT INTO ACCOUNT_ROLE(TX_ROLE, ID_PRIORITY) VALUES('ROLE_ROOT',1);
IF NOT EXISTS(SELECT * FROM ACCOUNT_ROLE WHERE ID=2)
INSERT INTO ACCOUNT_ROLE(TX_ROLE, ID_PRIORITY) VALUES('ROLE_SUPER',2);
IF NOT EXISTS(SELECT * FROM ACCOUNT_ROLE WHERE ID=3)
INSERT INTO ACCOUNT_ROLE(TX_ROLE, ID_PRIORITY) VALUES('ROLE_ADMIN',3);
IF NOT EXISTS(SELECT * FROM ACCOUNT_ROLE WHERE ID=4)
INSERT INTO ACCOUNT_ROLE(TX_ROLE, ID_PRIORITY) VALUES('ROLE_USER',4);



if not exists (select * from sysobjects where name='ACCOUNTS' and xtype='U')
CREATE TABLE ACCOUNTS (
	ID int IDENTITY(1,1) NOT NULL,
    TX_EMAIL VARCHAR(255) NOT NULL,
    TX_PASSWORD VARCHAR(255) NOT NULL,
    FL_ENABLED bit,
    TS_CREATE VARCHAR(30),
    FL_2FA bit,
    TX_2FA varchar(500),
    TX_TEMP_AUTH varchar(500),
	PRIMARY KEY(ID)	
);

IF NOT EXISTS(SELECT * FROM ACCOUNTS WHERE ID=1)
INSERT INTO ACCOUNTS(TX_EMAIL, TX_PASSWORD, FL_ENABLED, FL_2FA) VALUES('root@blinqlabs.com','{bcrypt}$2a$10$izC5EeoZcFpVJaZr3Si55Ofv4VjQ7t.MY2QrovlJGSFnXrNjnx7EG',1,0);
IF NOT EXISTS(SELECT * FROM ACCOUNTS WHERE ID=2)
INSERT INTO ACCOUNTS(TX_EMAIL, TX_PASSWORD, FL_ENABLED, FL_2FA) VALUES('super@blinqlabs.com','{bcrypt}$2a$10$izC5EeoZcFpVJaZr3Si55Ofv4VjQ7t.MY2QrovlJGSFnXrNjnx7EG',1,0);
IF NOT EXISTS(SELECT * FROM ACCOUNTS WHERE ID=3)
INSERT INTO ACCOUNTS(TX_EMAIL, TX_PASSWORD, FL_ENABLED, FL_2FA) VALUES('admin@blinqlabs.com','{bcrypt}$2a$10$izC5EeoZcFpVJaZr3Si55Ofv4VjQ7t.MY2QrovlJGSFnXrNjnx7EG',1,0);


if not exists (select * from sysobjects where name='USERS' and xtype='U')
CREATE TABLE  USERS (
	ID INT IDENTITY(1,1) NOT NULL,
	TX_FIRSTNAME VARCHAR(100),
	TX_LASTNAME VARCHAR(100),
	TS_CREATE VARCHAR(30),
	ID_ACCOUNT int,
	TX_WEBSITE VARCHAR(255),
	TX_CONTACT_NUM VARCHAR(15),
	TX_BIO NVARCHAR(MAX),
	TX_IMAGE NVARCHAR(MAX),
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='ACCOUNT_ATTACHMENTS' and xtype='U')
CREATE TABLE ACCOUNT_ATTACHMENTS (
	ID int IDENTITY(1,1) NOT NULL,
    ID_USER int not null,
    ID_ATTACHMENT int not null,
    TX_DESCRIPTION nvarchar(max),
    PRIMARY KEY(ID)	
);


IF NOT EXISTS(SELECT * FROM USERS WHERE ID=1)
INSERT INTO USERS(TX_FIRSTNAME, TX_LASTNAME, ID_ACCOUNT, TX_WEBSITE) VALUES('Root User','Website',1,'www.blinqlabs.com');
IF NOT EXISTS(SELECT * FROM USERS WHERE ID=2)
INSERT INTO USERS(TX_FIRSTNAME, TX_LASTNAME, ID_ACCOUNT, TX_WEBSITE) VALUES('Super User','Website',2,'www.blinqlabs.com');
IF NOT EXISTS(SELECT * FROM USERS WHERE ID=3)
INSERT INTO USERS(TX_FIRSTNAME, TX_LASTNAME, ID_ACCOUNT, TX_WEBSITE) VALUES('Admin','Website ',3,'www.blinqlabs.com');
	
if not exists (select * from sysobjects where name='ACCOUNT_RECOVERY' and xtype='U')
CREATE TABLE ACCOUNT_RECOVERY (
	ID int IDENTITY(1,1) NOT NULL,
    TX_EMAIL VARCHAR(255) NOT NULL,
    TX_CODE VARCHAR(10),
    TS_CREATE VARCHAR(30),
    TX_EXPIRY VARCHAR(30),
    FL_ACTIVE bit,
    PRIMARY KEY(ID)	
);


if not exists (select * from sysobjects where name='SERVER_STATE' and xtype='U')
CREATE TABLE  SERVER_STATE (
	ID INT IDENTITY(1,1) NOT NULL,
	TS_CREATE VARCHAR(30),
	TX_STATUS VARCHAR(100),
	PRIMARY KEY(ID)
	);	
	
if not exists (select * from sysobjects where name='AUTHORITY' and xtype='U')
CREATE TABLE AUTHORITY(
	ID INT IDENTITY(1,1) NOT NULL,
	ID_ACCOUNT INT NOT NULL,
	ID_ACCOUNT_ROLE INT NOT NULL,
	TS_CREATE VARCHAR(30),
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_ACCOUNT) REFERENCES ACCOUNTS(ID),
	FOREIGN KEY (ID_ACCOUNT_ROLE) REFERENCES ACCOUNT_ROLE(ID)
);
IF NOT EXISTS(SELECT * FROM AUTHORITY WHERE ID=1)
INSERT INTO AUTHORITY(ID_ACCOUNT, ID_ACCOUNT_ROLE) VALUES(1,1);
IF NOT EXISTS(SELECT * FROM AUTHORITY WHERE ID=2)
INSERT INTO AUTHORITY(ID_ACCOUNT, ID_ACCOUNT_ROLE) VALUES(2,2);
IF NOT EXISTS(SELECT * FROM AUTHORITY WHERE ID=3)
INSERT INTO AUTHORITY(ID_ACCOUNT, ID_ACCOUNT_ROLE) VALUES(3,3);



if not exists (select * from sysobjects where name='FEATURE_TOGGLE' and xtype='U')
CREATE TABLE FEATURE_TOGGLE (
	ID int IDENTITY(1,1) NOT NULL,
    TX_FEATURE VARCHAR(255) NOT NULL,
    FL_ACTIVE bit NOT NULL,
    PRIMARY KEY (ID)
);
IF NOT EXISTS(SELECT * FROM FEATURE_TOGGLE WHERE TX_FEATURE='Registration')
INSERT INTO FEATURE_TOGGLE(TX_FEATURE, FL_ACTIVE) VALUES('Registration',0);
IF NOT EXISTS(SELECT * FROM FEATURE_TOGGLE WHERE TX_FEATURE='Licensing')
INSERT INTO FEATURE_TOGGLE(TX_FEATURE, FL_ACTIVE) VALUES('Licensing',0);
IF NOT EXISTS(SELECT * FROM FEATURE_TOGGLE WHERE TX_FEATURE='Admin Licensing')
INSERT INTO FEATURE_TOGGLE(TX_FEATURE, FL_ACTIVE) VALUES('Admin Licensing',0);
IF NOT EXISTS(SELECT * FROM FEATURE_TOGGLE WHERE TX_FEATURE='Ticketing System')
INSERT INTO FEATURE_TOGGLE(TX_FEATURE, FL_ACTIVE) VALUES('Ticketing System',0);
IF NOT EXISTS(SELECT * FROM FEATURE_TOGGLE WHERE TX_FEATURE='Notifications')
INSERT INTO FEATURE_TOGGLE(TX_FEATURE, FL_ACTIVE) VALUES('Notifications',0);


if not exists (select * from sysobjects where name='FEATURE_TOGGLE_HISTORY' and xtype='U')
CREATE TABLE FEATURE_TOGGLE_HISTORY (
	ID int IDENTITY(1,1) NOT NULL,
    ID_FEATURE int not null,
    FL_STATE bit,
	TX_UPDATE varchar(255),
	ID_USER int,
    TS_UPDATE VARCHAR(30),
    PRIMARY KEY (ID),
	FOREIGN KEY (ID_FEATURE) REFERENCES FEATURE_TOGGLE(ID)
);

if not exists (select * from sysobjects where name='FEATURE_SECTION' and xtype='U')
CREATE TABLE FEATURE_SECTION (
	ID int IDENTITY(1,1) NOT NULL,
    TX_SECTION VARCHAR(255) NOT NULL,
    PRIMARY KEY (ID)
);
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION WHERE TX_SECTION='Profile')
INSERT INTO FEATURE_SECTION(TX_SECTION) VALUES('Profile');
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION WHERE TX_SECTION='Licensing')
INSERT INTO FEATURE_SECTION(TX_SECTION) VALUES('Licensing');
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION WHERE TX_SECTION='Tickets')
INSERT INTO FEATURE_SECTION(TX_SECTION) VALUES('Tickets');
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION WHERE TX_SECTION='Communication')
INSERT INTO FEATURE_SECTION(TX_SECTION) VALUES('Communication');


if not exists (select * from sysobjects where name='FEATURE_SECTION_MAP' and xtype='U')
CREATE TABLE FEATURE_SECTION_MAP (
	ID int IDENTITY(1,1) NOT NULL,
    ID_SECTION int not null,
    ID_FEATURE int not null,
    PRIMARY KEY (ID),
);
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION_MAP WHERE ID_FEATURE=(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Registration'))
INSERT INTO FEATURE_SECTION_MAP(ID_SECTION, ID_FEATURE) VALUES((SELECT ID FROM FEATURE_SECTION WHERE TX_SECTION='Profile'),(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Registration'));
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION_MAP WHERE ID_FEATURE=(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Licensing'))
INSERT INTO FEATURE_SECTION_MAP(ID_SECTION, ID_FEATURE) VALUES((SELECT ID FROM FEATURE_SECTION WHERE TX_SECTION='Licensing'),(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Licensing'));
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION_MAP WHERE ID_FEATURE=(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Admin Licensing'))
INSERT INTO FEATURE_SECTION_MAP(ID_SECTION, ID_FEATURE) VALUES((SELECT ID FROM FEATURE_SECTION WHERE TX_SECTION='Licensing'),(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Admin Licensing'));
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION_MAP WHERE ID_FEATURE=(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Ticketing System'))
INSERT INTO FEATURE_SECTION_MAP(ID_SECTION, ID_FEATURE) VALUES((SELECT ID FROM FEATURE_SECTION WHERE TX_SECTION='Tickets'),(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Ticketing System'));
IF NOT EXISTS(SELECT * FROM FEATURE_SECTION_MAP WHERE ID_FEATURE=(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Notifications'))
INSERT INTO FEATURE_SECTION_MAP(ID_SECTION, ID_FEATURE) VALUES((SELECT ID FROM FEATURE_SECTION WHERE TX_SECTION='Communication'),(SELECT ID FROM FEATURE_TOGGLE WHERE TX_FEATURE='Notifications'));


if not exists (select * from sysobjects where name='FEATURE_DELETED' and xtype='U')
CREATE TABLE FEATURE_DELETED (
	ID int IDENTITY(1,1) NOT NULL,
    ID_FEATURE int not null,
    TX_FEATURE varchar(255),
    ID_SECTION int,
    TX_SECTION VARCHAR(255),
    ID_USER int,
    TS_TIME varchar(255)
    PRIMARY KEY (ID),
    FOREIGN KEY (ID_USER) REFERENCES USERS(ID)
);


if not exists (select * from sysobjects where name='PRODUCTS' and xtype='U')
CREATE TABLE PRODUCTS (
	ID int IDENTITY(1,1) NOT NULL,
	FL_ACTIVE bit, 
	TX_PRODUCT_NAME varchar(255),
	TX_PRODUCT_DESC nvarchar(max),
	FL_LICENSE bit,
	PRIMARY KEY (ID)
);
IF NOT EXISTS(SELECT * FROM PRODUCTS WHERE TX_PRODUCT_NAME='Blinqlabs Website')
INSERT INTO PRODUCTS(FL_ACTIVE, TX_PRODUCT_NAME, TX_PRODUCT_DESC, FL_LICENSE) VALUES(1,'Blinqlabs Website', 'Blinqlabs Website',0);


if not exists (select * from sysobjects where name='STATUSTAB' and xtype='U')
CREATE TABLE STATUSTAB (
	ID int IDENTITY(1,1) NOT NULL,
	TX_STATUS VARCHAR(255),
	FL_ACTIVE bit
);

IF NOT EXISTS(SELECT * FROM STATUSTAB WHERE ID=1)
INSERT INTO STATUSTAB(TX_STATUS, FL_ACTIVE) VALUES('OPEN',1);
IF NOT EXISTS(SELECT * FROM STATUSTAB WHERE ID=2)
INSERT INTO STATUSTAB(TX_STATUS, FL_ACTIVE) VALUES('IN PROGRESS',1);
IF NOT EXISTS(SELECT * FROM STATUSTAB WHERE ID=3)
INSERT INTO STATUSTAB(TX_STATUS, FL_ACTIVE) VALUES('INVESTIGATION',1);
IF NOT EXISTS(SELECT * FROM STATUSTAB WHERE ID=4)
INSERT INTO STATUSTAB(TX_STATUS, FL_ACTIVE) VALUES('WAITING FOR CUSTOMER',1);
IF NOT EXISTS(SELECT * FROM STATUSTAB WHERE ID=5)
INSERT INTO STATUSTAB(TX_STATUS, FL_ACTIVE) VALUES('CLOSED',1);
IF NOT EXISTS(SELECT * FROM STATUSTAB WHERE ID=6)
INSERT INTO STATUSTAB(TX_STATUS, FL_ACTIVE) VALUES('ESCALATED',1);



if not exists (select * from sysobjects where name='ATTACHMENTS' and xtype='U')
CREATE TABLE ATTACHMENTS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_ATTACHMENT nvarchar(max),
	TX_NAME nvarchar(max),
	TX_SIZE varchar(100),
	TX_TYPE varchar(100),
	TX_DATE varchar(25),
  PRIMARY KEY (ID),
);
	
if not exists (select * from sysobjects where name='LICENSES' and xtype='U')
CREATE TABLE LICENSES (
	ID int IDENTITY(1,1) NOT NULL,
  	TX_LICENSE VARCHAR(1024) NOT NULL,
  	ID_ACCOUNT INT NOT NULL,
  	TS_CREATE VARCHAR(30),
  	TX_PRODUCT varchar(255) ,
	TX_VALIDITY varchar(50),
	TX_LICENSE_TYPE varchar(15) ,
  	PRIMARY KEY (ID),
	FOREIGN KEY (ID_ACCOUNT) REFERENCES ACCOUNTS(ID)
);

if not exists (select * from sysobjects where name='MESSAGES' and xtype='U')
CREATE TABLE MESSAGES (
	ID int IDENTITY(1,1) NOT NULL,
    TX_SUBJECT VARCHAR(255) NOT NULL,
	TX_BODY nvarchar(max),
	ID_TO int not null,
	ID_FROM int not null, 
	TX_READ bit not null,
	TX_STAR bit,
	TX_TIME VARCHAR(255),
	TX_ATTACHMENT varchar(max),
	TX_FLAG VARCHAR(255),
    ID_PRIORITY INT NOT NULL,
	ID_PARENT int,
    PRIMARY KEY (ID),
	FOREIGN KEY(ID_TO) REFERENCES ACCOUNTS(ID),
	FOREIGN KEY (ID_FROM) REFERENCES ACCOUNTS(ID),
	FOREIGN KEY(ID_PARENT) REFERENCES MESSAGES(ID)
);

if not exists (select * from sysobjects where name='TICKETS' and xtype='U')
CREATE TABLE TICKETS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_SUBJECT VARCHAR(255) NOT NULL,
	ID_ACCOUNT int not null,
	TX_TIME VARCHAR(255),
	ID_PRIORITY INT NOT NULL,
	ID_SERVICE_ENTITLEMENT int not null,
	ID_AGENT int,
	ID_STATUS int not null,
    PRIMARY KEY (ID),
	FOREIGN KEY (ID_ACCOUNT) REFERENCES ACCOUNTS(ID)
);

if not exists (select * from sysobjects where name='TICKET_THREADS' and xtype='U')
CREATE TABLE TICKET_THREADS (
	ID int IDENTITY(1,1) NOT NULL,
	TICKET_ID int not null,
	TX_BODY nvarchar(max) not null,
	TX_READ bit not null,
	TX_TIME VARCHAR(255),
	TX_ATTACHMENT varchar(max),
	ID_PARENT int,
	ID_USER int,
	FL_EDIT int,
  	PRIMARY KEY (ID),
	FOREIGN KEY (TICKET_ID) REFERENCES TICKETS(ID)
);

if not exists (select * from sysobjects where name='TICKET_THREAD_ATTACHMENT' and xtype='U')
CREATE TABLE TICKET_THREAD_ATTACHMENT (
	ID int IDENTITY(1,1) NOT NULL,
	ID_TICKET_THREAD int not null,
	ID_ATTACHMENT int not null,
  	PRIMARY KEY (ID),
	FOREIGN KEY (ID_TICKET_THREAD) REFERENCES TICKET_THREADS(ID)
);

if not exists (select * from sysobjects where name='TICKET_WORK_LOG' and xtype='U')
CREATE TABLE TICKET_WORK_LOG (
	ID int IDENTITY(1,1) NOT NULL,
	ID_TICKET int not null,
	ID_USER int not null,
	TX_WORKLOG varchar(100),
	TX_DATETIME varchar(100),
	TX_DESCRIPTION nvarchar(max),
  	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='SERVICE_LICENSE_ENTITLEMENT' and xtype='U')
CREATE TABLE SERVICE_LICENSE_ENTITLEMENT (
	ID int IDENTITY(1,1) NOT NULL,
	TX_ENTITLEMENT varchar(255) not null,
	ID_ACCOUNT int not null,
	ID_LICENSE int not null,
	TX_VALIDITY VARCHAR(15),
    PRIMARY KEY (ID),
	FOREIGN KEY (ID_ACCOUNT) REFERENCES ACCOUNTS(ID),
	FOREIGN KEY (ID_LICENSE) REFERENCES LICENSES(ID)
);

if not exists (select * from sysobjects where name='SERVICE_ENTITLEMENT_TYPE' and xtype='U')
CREATE TABLE SERVICE_ENTITLEMENT_TYPE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_ENTITLEMENT_TYPE varchar(255) not null,
	TX_DESCRIPTION NVARCHAR(max),
	FL_ROLLOVER int,
	FL_ACTIVE int,
	FL_MONTHLY_BILLING int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SERVICE_ENTITLEMENT' and xtype='U')
CREATE TABLE SERVICE_ENTITLEMENT (
	ID int IDENTITY(1,1) NOT NULL,
	ID_ACCOUNT int not null,
	TX_ENTITLEMENT varchar(255) not null,
	TX_ENTITLEMENT_DESCRIPTION nvarchar(max),
	TS_START VARCHAR(30),
	TX_END_CRITERIA VARCHAR(15),
	TS_END VARCHAR(30),
  	ID_ENTITLEMENT_TYPE int,
  	FL_ROLLED int,
  	FL_ACTIVE int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SERVICE_ENTITLEMENT_RATES' and xtype='U')
CREATE TABLE SERVICE_ENTITLEMENT_RATES (
	ID int IDENTITY(1,1) NOT NULL,
	ID_ENTITLEMENT int not null,
	TX_TIER varchar(255) not null,
	TX_LIMIT varchar(10) not null,
	TX_COST varchar(255) not null,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SERVICE_ENTITLEMENT_ATTACHMENTS' and xtype='U')
CREATE TABLE SERVICE_ENTITLEMENT_ATTACHMENTS (
	ID int IDENTITY(1,1) NOT NULL,
	ID_ENTITLEMENT int not null,
	ID_ATTACHMENT int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SERVICE_BILLING_CYCLE' and xtype='U')
CREATE TABLE SERVICE_BILLING_CYCLE (
	ID int IDENTITY(1,1) NOT NULL,
	ID_ENTITLEMENT int,
	TS_START_DATE VARCHAR(100),
	TS_END_DATE VARCHAR(100),
	TX_DATA NVARCHAR(MAX),
	FL_COMPLETE int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SERVICE_BILLING_ATTACHMENTS' and xtype='U')
CREATE TABLE SERVICE_BILLING_ATTACHMENTS (
	ID int IDENTITY(1,1) NOT NULL,
	ID_SERVICE_BILLING_CYCLE int,
	ID_ATTACHMENT int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SERVICE_TIER_ROLLOVER' and xtype='U')
CREATE TABLE SERVICE_TIER_ROLLOVER (
	ID int IDENTITY(1,1) NOT NULL,
	ID_SERVICE_BILLING_CYCLE int,
	NUM_ROLLOVER int,
	NUM_BALANCE int,
	FL_ACTIVE int,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='SUBSCRIPTION_PLATFORM' and xtype='U')
CREATE TABLE SUBSCRIPTION_PLATFORM (
	ID int IDENTITY(1,1) NOT NULL,
	TX_PLATFORM varchar(255) not null,
	TX_CONNECTION_STRING varchar(255),
	FL_ACTIVE bit not null,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='SUBSCRIPTION_TYPE' and xtype='U')
CREATE TABLE SUBSCRIPTION_TYPE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_SUBSCRIPTION varchar(255) not null,
	FL_ACTIVE bit not null,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='SUBSCRIPTIONS' and xtype='U')
CREATE TABLE SUBSCRIPTIONS (
	ID int IDENTITY(1,1) NOT NULL,
	ID_SUBSCRIPTION_TYPE int not null,
	ID_ACCOUNT int not null,
	TS_START_TIMESTAMP VARCHAR(30),
	FL_SUBSCRIPTION_STATUS bit not null,
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_SUBSCRIPTION_TYPE) REFERENCES SUBSCRIPTION_TYPE(ID),
	FOREIGN KEY (ID_ACCOUNT) REFERENCES ACCOUNTS(ID)
);

if not exists (select * from sysobjects where name='SUBSCRIPTION_ACTIVITY' and xtype='U')
CREATE TABLE SUBSCRIPTION_ACTIVITY (
	ID int IDENTITY(1,1) NOT NULL,
	ID_SUBSCRIPTION int not null,
	TS_START VARCHAR(30),
	TX_ACTIVITY_TYPE varchar(255),
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_SUBSCRIPTION) REFERENCES SUBSCRIPTIONS(ID)
);


if not exists (select * from sysobjects where name='SUBSCRIPTION_PRODUCTS' and xtype='U')
CREATE TABLE SUBSCRIPTION_PRODUCTS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_PRODUCT varchar(255) not null,
	FL_ACTIVE bit not null,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='BLOG_ARTICLES' and xtype='U')
CREATE TABLE BLOG_ARTICLES (
	ID int IDENTITY(1,1) NOT NULL,
	TX_TITLE varchar(1024) not null,
	TS_CREATE VARCHAR(30),
	ID_AUTHOR INT NOT NULL,
	TX_IMAGE nvarchar(max),
	TX_BODY nvarchar(max),
	FL_ACTIVE bit not null,
	TX_TAGS nvarchar(max),
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_AUTHOR) REFERENCES ACCOUNTS(ID)
);

if not exists (select * from sysobjects where name='FAQ' and xtype='U')
CREATE TABLE FAQ (
	ID int IDENTITY(1,1) NOT NULL,
	TX_QUESTION varchar(max) not null,
	TX_ANSWER nvarchar(max),
	FL_ACTIVE bit not null,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='BLOG_CATEGORIES' and xtype='U')
CREATE TABLE BLOG_CATEGORIES (
	ID int IDENTITY(1,1) NOT NULL,
	TX_CATEGORY nvarchar(max) NOT NULL,
	FL_ACTIVE bit not null,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='BLOG_CATEGORY_LINK' and xtype='U')
CREATE TABLE BLOG_CATEGORY_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_BLOG int not null,
	ID_BLOG_CATEGORY int not null,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='BLOG_COMMENTS' and xtype='U')
CREATE TABLE BLOG_COMMENTS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_BODY nvarchar(max) not null,
	ID_DEPTH int,
	TX_COUNT_LIKES int,
	TS_CREATE varchar(25),
	FL_EDITED bit not null,
	PRIMARY KEY (ID)	
);

if not exists (select * from sysobjects where name='BLOG_COMMENT_LINK' and xtype='U')
CREATE TABLE BLOG_COMMENT_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_BLOG int not null,
	ID_COMMENT int not null,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='BLOG_COMMENT_AUTHORS' and xtype='U')
CREATE TABLE BLOG_COMMENT_AUTHORS (
	ID int IDENTITY(1,1) NOT NULL,
	FL_SYSTEM_USER bit not null,
	ID_USER int,
	TX_NAME nvarchar(max),
	TX_EMAIL nvarchar(max),
	ID_COMMENT INT NOT NULL,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='BLOG_COMMENT_HIERARCHY' and xtype='U')
CREATE TABLE BLOG_COMMENT_HIERARCHY (
	ID int IDENTITY(1,1) NOT NULL,
	ID_COMMENT int not null,
	ID_CMT_PARENT int not null,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='PERMISSION_SECTIONS' and xtype='U')
CREATE TABLE PERMISSION_SECTIONS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_PERM_SECTION NVARCHAR(MAX),
	PRIMARY KEY (ID)
);
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Administration')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Administration');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Comments')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Comments');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Cookies')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Cookies');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Security')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Security');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Subscriptions')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Subscriptions');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Ticketing')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Ticketing');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Users')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Users');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Cloud')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Cloud');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Blogs')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Blogs');
if not exists (select * from PERMISSION_SECTIONS where TX_PERM_SECTION='Features')
INSERT INTO PERMISSION_SECTIONS(TX_PERM_SECTION) values('Features');


if not exists (select * from sysobjects where name='SYSTEM_PERMISSIONS' and xtype='U')
CREATE TABLE SYSTEM_PERMISSIONS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_PERMISSION NVARCHAR(MAX) NOT NULL,
	TX_DESCRIPTION NVARCHAR(max),
	TX_PERMISSION_CODE VARCHAR(50),
	ID_PERM_SECTION int not null,
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_PERM_SECTION) REFERENCES PERMISSION_SECTIONS(ID)
);
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Administer Website')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Administer Website', 'This is the root permission. Holding this permission provides complete access to all Administration of the website.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_ADMIN_WEBSITE');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Features')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Features', 'Ability to Manage Features and Feature Sections.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_FEATURES');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Licenses')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Licenses', 'Ability to Manage Licenses, Generate New Licenses and Extend licenses.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_LICENSE');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='FAQs')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('FAQs', 'Ability to manage FAQs.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_FAQ');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Settings')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Settings', 'Ability to view the website settings',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_SETTINGS_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Modify Settings')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Modify Settings', 'Ability to modify the website settings.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_SETTINGS_MODIFY');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Permissions')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Permissions', 'Ability to view the system permissions.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_PERMISSIONS_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Announcements')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Announcements', 'Ability to modify the System Announcements.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_ANNOUNCEMENTS');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Integrations')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Integrations', 'Ability to view System Integrations.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_INTEGRATIONS_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Modify Integrations')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Modify Integrations', 'Ability to modify System Integrations.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_INTEGRATIONS_MODIFY');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Service Administration')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Service Administration', 'Ability to modify Service Rates.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_ADMIN_SERVICES');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='General Administration')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('General Administration', 'Ability to access or perform any of the Admin functionality. This has to be enabled to use even one Admin functionality. User will not be able to perform any administrative tasks (even if enabled) without this permission.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Administration'), 'PERM_ADMIN_GENERAL');



if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Comment Details')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Comment Details', 'Ability to view Metadata for the comment; like commenters email.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Comments'), 'PERM_COMMENT_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Delete Comments')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Delete Comments', 'Ability to delete comments.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Comments'), 'PERM_COMMENT_DELETE');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Edit Comments')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Edit Comments', 'Ability to edit comments.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Comments'), 'PERM_COMMENT_EDIT');

if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Cookies')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Cookies', 'Ability to manage Cookies.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Cookies'), 'PERM_COOKIES');

if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Manage 2FA')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Manage 2FA', 'Ability to manage 2FA settings.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Security'), 'PERM_2FA');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='User Credential Management')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('User Credential Management', 'Ability to assist users in password management.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Security'), 'PERM_USER_CREDENTIALS');

if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Subscriptions')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Subscriptions', 'Ability to manage subscription lists.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Subscriptions'), 'PERM_SUBSCRIPTION');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Watchers')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Watchers', 'Ability to manage watchers.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Subscriptions'), 'PERM_WATCHER');


if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Tickets')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Tickets', 'Ability to view Tickets.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Ticketing'), 'PERM_TICKET_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Work on Tickets')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Work on Tickets', 'Ability to work on tickets.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Ticketing'), 'PERM_TICKET_WORK');

if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Users')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Users', 'Ability to view all System Users.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Users'), 'PERM_USERS_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Create and Modify Users')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Create and Modify Users', 'Ability to create and modify all System Users.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Users'), 'PERM_USERS_CREATE_MODIFY');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Groups')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Groups', 'Ability to view all System Groups.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Users'), 'PERM_GROUPS_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Create and Modify Groups')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Create and Modify Groups', 'Ability to create and modify System Groups.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Users'), 'PERM_GROUPS_CREATE_MODITY');


if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Cloud Config')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Cloud Config', 'Ability to view configurations for Cloud settings.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Cloud'), 'PERM_CLOUD_CONFIG_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Modify Cloud Config')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Modify Cloud Config', 'Ability to modify configurations for Cloud settings.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Cloud'), 'PERM_CLOUD_CONFIG_MODIFY');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Cloud Credentials')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Cloud Credentials', 'Ability to view credentials for Cloud settings.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Cloud'), 'PERM_CLOUD_CREDENTIALS_VIEW');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Modify Cloud Credentials')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Modify Cloud Credentials', 'Ability to modify credentials for Cloud settings.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Cloud'), 'PERM_CLOUD_CREDENTIALS_MODIFY');


if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Create Blog')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Create Blog', 'Ability to create new Blog Articles.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Blogs'), 'PERM_BLOG_CREATE');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Publish Blog')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Publish Blog', 'Ability to publish new Blog Articles.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Blogs'), 'PERM_BLOG_PUBLISH');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Create / Modify Blog Categories')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Create / Modify Blog Categories', 'Ability to create and modify Blog Categories.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Blogs'), 'PERM_BLOG_CATEGORY_CREATE_MODIFY');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='View Blog Categories')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('View Blog Categories', 'Ability to view Blog Categories.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Blogs'), 'PERM_BLOG_CATEGORY_VIEW');


if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Lab Services')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Lab Services', 'Ability to access Labs.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_LAB');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Orders')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Orders', 'Ability to view Order history.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_ORDERS');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Downloads')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Downloads', 'Ability to access the Downloads Page.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_DOWNLOADS');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Cloud Services')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Cloud Services', 'Ability to access IaaS, PaaS and SaaS.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_CLOUD');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Technical Support')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Technical Support', 'Ability to access information related to Technical Support.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_TECH_SUPPORT');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Messaging')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Messaging', 'Ability to access the messaging functionality.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_MESSAGING');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Ticketing')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Ticketing', 'Ability to access the ticketing functionality.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_TICKETING');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='Documentation')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('Documentation', 'Ability to access information related to Documentation.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_FEATURE_DOCUMENTATION');
if not exists (select * from SYSTEM_PERMISSIONS where TX_PERMISSION='User Payments')
INSERT INTO SYSTEM_PERMISSIONS(TX_PERMISSION, TX_DESCRIPTION, ID_PERM_SECTION, TX_PERMISSION_CODE) values('User Payments', 'Ability to record and update Payment information. Make payments.',(SELECT ID FROM PERMISSION_SECTIONS WHERE TX_PERM_SECTION='Features'), 'PERM_USER_PAYMENT');

if not exists (select * from sysobjects where name='GROUPS' and xtype='U')
CREATE TABLE GROUPS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_GROUP_NAME NVARCHAR(MAX) NOT NULL,
	PRIMARY KEY (ID)
);
if not exists (select * from GROUPS where TX_GROUP_NAME='Site-Administrators')
INSERT INTO GROUPS(TX_GROUP_NAME) values('Site-Administrators');
if not exists (select * from GROUPS where TX_GROUP_NAME='Site-Users')
INSERT INTO GROUPS(TX_GROUP_NAME) values('Site-Users');

if not exists (select * from sysobjects where name='USER_GROUP_LINK' and xtype='U')
CREATE TABLE USER_GROUP_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_USER int not null,
	ID_GROUP int not null,
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_USER) REFERENCES USERS(ID),
	FOREIGN KEY (ID_GROUP) REFERENCES GROUPS(ID)
);
if not exists (select * from USER_GROUP_LINK where ID_USER=1 AND ID_GROUP=1)
INSERT INTO USER_GROUP_LINK(ID_USER, ID_GROUP) values(1,1);
if not exists (select * from USER_GROUP_LINK where ID_USER=1 AND ID_GROUP=2)
INSERT INTO USER_GROUP_LINK(ID_USER, ID_GROUP) values(1,2);
if not exists (select * from USER_GROUP_LINK where ID_USER=2 AND ID_GROUP=1)
INSERT INTO USER_GROUP_LINK(ID_USER, ID_GROUP) values(2,1);
if not exists (select * from USER_GROUP_LINK where ID_USER=2 AND ID_GROUP=2)
INSERT INTO USER_GROUP_LINK(ID_USER, ID_GROUP) values(2,2);
if not exists (select * from USER_GROUP_LINK where ID_USER=3 AND ID_GROUP=1)
INSERT INTO USER_GROUP_LINK(ID_USER, ID_GROUP) values(3,1);
if not exists (select * from USER_GROUP_LINK where ID_USER=3 AND ID_GROUP=2)
INSERT INTO USER_GROUP_LINK(ID_USER, ID_GROUP) values(3,2);

if not exists (select * from sysobjects where name='USER_PERMISSION_LINK' and xtype='U')
CREATE TABLE USER_PERMISSION_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_USER int not null,
	ID_PERMISSION int not null,
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_USER) REFERENCES USERS(ID),
	FOREIGN KEY (ID_PERMISSION) REFERENCES SYSTEM_PERMISSIONS(ID)
);


if not exists (select * from sysobjects where name='GROUP_PERMISSION_LINK' and xtype='U')
CREATE TABLE GROUP_PERMISSION_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_GROUP int not null,
	ID_PERMISSION int not null,
	FL_STATUS bit,
	PRIMARY KEY (ID)
);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Administer Website'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Administer Website'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Features'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Features'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Licenses'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Licenses'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'FAQs'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'FAQs'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Settings'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Settings'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Settings'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Settings'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Comment Details'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Comment Details'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Delete Comments'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Delete Comments'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Edit Comments'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Edit Comments'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cookies'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cookies'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Manage 2FA'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Manage 2FA'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Credential Management'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Credential Management'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Subscriptions'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Subscriptions'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Watchers'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Watchers'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Tickets'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Tickets'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Work on Tickets'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Work on Tickets'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Users'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Users'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Users'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Users'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Groups'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Groups'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Groups'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Groups'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Permissions'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Permissions'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Announcements'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Announcements'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Config'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Config'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Config'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Config'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Credentials'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Credentials'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Credentials'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Credentials'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create Blog'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create Blog'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Publish Blog'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Publish Blog'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create / Modify Blog Categories'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create / Modify Blog Categories'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Blog Categories'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Blog Categories'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Integrations'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Integrations'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Integrations'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Integrations'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Lab Services'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Lab Services'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Orders'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Orders'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Downloads'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Downloads'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cloud Services'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cloud Services'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Technical Services'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Technical Support'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Messaging'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Messaging'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Ticketing'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Ticketing'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Documentation'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Documentation'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Service Administration'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Service Administration'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Payments'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Payments'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=1 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'General Administration'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(1,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'General Administration'),1);



if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Administer Website'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Administer Website'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Features'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Features'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Licenses'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Licenses'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'FAQs'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'FAQs'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Settings'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Settings'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Settings'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Settings'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Comment Details'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Comment Details'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Delete Comments'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Delete Comments'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Edit Comments'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Edit Comments'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cookies'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cookies'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Manage 2FA'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Manage 2FA'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Credential Management'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Credential Management'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Subscriptions'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Subscriptions'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Watchers'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Watchers'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Tickets'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Tickets'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Work on Tickets'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Work on Tickets'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Users'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Users'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Users'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Users'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Groups'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Groups'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Groups'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create and Modify Groups'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Permissions'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Permissions'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Announcements'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Announcements'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Config'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Config'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Config'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Config'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Credentials'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Cloud Credentials'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Credentials'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Cloud Credentials'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create Blog'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create Blog'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Publish Blog'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Publish Blog'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create / Modify Blog Categories'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Create / Modify Blog Categories'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Blog Categories'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Blog Categories'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Integrations'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'View Integrations'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Integrations'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Modify Integrations'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Lab Services'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Lab Services'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Orders'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Orders'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Downloads'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Downloads'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cloud Services'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Cloud Services'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Technical Services'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Technical Support'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Messaging'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Messaging'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Ticketing'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Ticketing'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Documentation'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Documentation'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Service Administration'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'Service Administration'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Payments'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'User Payments'),1);
if not exists (select * from GROUP_PERMISSION_LINK where ID_GROUP=2 AND ID_PERMISSION=(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'General Administration'))
INSERT INTO GROUP_PERMISSION_LINK(ID_GROUP,ID_PERMISSION,FL_STATUS) values(2,(SELECT ID FROM SYSTEM_PERMISSIONS WHERE TX_PERMISSION = 'General Administration'),1);

if not exists (select * from sysobjects where name='PERMISSION_HISTORY_AUDIT' and xtype='U')
CREATE TABLE PERMISSION_HISTORY_AUDIT (
	ID int IDENTITY(1,1) NOT NULL,
	ID_USER int not null,
	ID_PERMISSION int not null,
	TX_STATUS nvarchar(max),
	ID_MODIFIER int not null,
	PRIMARY KEY (ID),
	FOREIGN KEY (ID_USER) REFERENCES Users(ID),
	FOREIGN KEY (ID_PERMISSION) REFERENCES SYSTEM_PERMISSIONS(ID),
	FOREIGN KEY (ID_MODIFIER) REFERENCES Users(ID)
);

if not exists (select * from sysobjects where name='SUBSCRIBE' and xtype='U')
CREATE TABLE SUBSCRIBE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_EMAIL NVARCHAR (max),
	FL_ACTIVE bit,
	TS_TIMESTAMP VARCHAR(30),
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='CONTACT_MESSAGE' and xtype='U')
CREATE TABLE CONTACT_MESSAGE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_NAME NVARCHAR (max),
	TX_EMAIL NVARCHAR (max),
	TX_PHONE NVARCHAR (max),
	TX_MESSAGE NVARCHAR (max),
	TS_TIMESTAMP VARCHAR(30),
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='ACCOUNT_VERIFICATION' and xtype='U')
CREATE TABLE ACCOUNT_VERIFICATION (
	ID int IDENTITY(1,1) NOT NULL,
	FL_EMAIL_VERIFIED bit,
	TX_EMAIL_VERIFIED varchar(500),
	TS_EMAIL_VERIFIED varchar(30),
	FL_MOB_VERIFIED bit,
	TX_MOB_VERIFIED varchar(500),
	TS_MOB_VERIFIED varchar(30),
	ID_USER int,
	TS_TIMESTAMP VARCHAR(30),
	PRIMARY KEY (ID)
);

IF NOT EXISTS(SELECT * FROM ACCOUNT_VERIFICATION WHERE ID_USER=1)
INSERT INTO ACCOUNT_VERIFICATION (FL_EMAIL_VERIFIED, TX_EMAIL_VERIFIED, TS_EMAIL_VERIFIED, FL_MOB_VERIFIED, TX_MOB_VERIFIED, TS_MOB_VERIFIED, ID_USER)
VALUES(1,null,null, 1, null, null, 1);
IF NOT EXISTS(SELECT * FROM ACCOUNT_VERIFICATION WHERE ID_USER=2)
INSERT INTO ACCOUNT_VERIFICATION (FL_EMAIL_VERIFIED, TX_EMAIL_VERIFIED, TS_EMAIL_VERIFIED, FL_MOB_VERIFIED, TX_MOB_VERIFIED, TS_MOB_VERIFIED, ID_USER)
VALUES(1,null,null, 1, null, null, 2);
IF NOT EXISTS(SELECT * FROM ACCOUNT_VERIFICATION WHERE ID_USER=3)
INSERT INTO ACCOUNT_VERIFICATION (FL_EMAIL_VERIFIED, TX_EMAIL_VERIFIED, TS_EMAIL_VERIFIED, FL_MOB_VERIFIED, TX_MOB_VERIFIED, TS_MOB_VERIFIED, ID_USER)
VALUES(1,null,null, 1, null, null, 3);


if not exists (select * from sysobjects where name='CLOUD_AUTH' and xtype='U')
CREATE TABLE CLOUD_AUTH (
	ID int IDENTITY(1,1) NOT NULL,
	TX_IDENTIFIER varchar(100),
	TX_PROVIDER varchar(100),
	TX_ACCESS_KEY nvarchar(max),
	TX_ACCESS_SECRET nvarchar(max),
	TS_TIMESTAMP VARCHAR(30),
	PRIMARY KEY (ID)
);

IF NOT EXISTS(SELECT * FROM CLOUD_AUTH WHERE TX_PROVIDER='AWS')
INSERT INTO CLOUD_AUTH (TX_PROVIDER) VALUES ('AWS');
IF NOT EXISTS(SELECT * FROM CLOUD_AUTH WHERE TX_PROVIDER='GCP')
INSERT INTO CLOUD_AUTH (TX_PROVIDER) VALUES ('GCP');
IF NOT EXISTS(SELECT * FROM CLOUD_AUTH WHERE TX_PROVIDER='AZURE')
INSERT INTO CLOUD_AUTH (TX_PROVIDER) VALUES ('AZURE');


if not exists (select * from sysobjects where name='DEVOPS_CATEGORIES' and xtype='U')
CREATE TABLE DEVOPS_CATEGORIES (
	ID int IDENTITY(1,1) NOT NULL,
	TX_CATEGORY varchar(100) not null,
	TX_CAT_CODE varchar(100) not null,
	TX_DESCRIPTION nvarchar(max),
	FL_STATUS bit,
	TS_TIMESTAMP VARCHAR(30),
	PRIMARY KEY (ID)
);

IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CE')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Exploration','CE','Continuous Exploration',1);
IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CI')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Integration','CI','Continuous Integration',1);
IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CDL')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Delivery','CDL','Continuous Delivery',1);
IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CDP')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Deployment','CDP','Continuous Deployment',1);
IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CT')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Testing','CT','Continuous Testing',1);
IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CS')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Security','CS','Continuous Security',1);
IF NOT EXISTS(SELECT * FROM DEVOPS_CATEGORIES WHERE TX_CAT_CODE='CM')
INSERT INTO DEVOPS_CATEGORIES (TX_CATEGORY, TX_CAT_CODE, TX_DESCRIPTION, FL_STATUS) VALUES ('Continuous Monitoring','CM','Continuous Monitoring',1);


if not exists (select * from sysobjects where name='DEVOPS_TOOLS' and xtype='U')
CREATE TABLE DEVOPS_TOOLS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_TOOL_NAME varchar(100) not null,
	TX_TOOL_IMAGE nvarchar(max) not null,
	TX_DOWNLOAD_LOC nvarchar(max),
	TX_PORT int,
	FL_STATUS bit,
	TS_TIMESTAMP VARCHAR(30),
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='DEVOPS_CATEGORY_TOOL_LINK' and xtype='U')
CREATE TABLE DEVOPS_CATEGORY_TOOL_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_DEVOPS_CATEGORY int,
	ID_DEVOPS_TOOL int,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='DEVOPS_TOOL_CONFIG' and xtype='U')
CREATE TABLE DEVOPS_TOOL_CONFIG (
	ID int IDENTITY(1,1) NOT NULL,
	TX_CONFIG_NAME varchar(100) not null,
	TX_COMMAND nvarchar(max) not null,
	ID_ORDER int,
	TX_TYPE nvarchar(max),
	TX_FILE nvarchar(max),
	FL_STATUS bit,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='DEVOPS_TOOL_CONFIG_LINK' and xtype='U')
CREATE TABLE DEVOPS_TOOL_CONFIG_LINK (
	ID int IDENTITY(1,1) NOT NULL,
	ID_DEVOPS_TOOL int,
	ID_DEVOPS_TOOL_CONFIG int,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='USER_WORKBENCH' and xtype='U')
CREATE TABLE USER_WORKBENCH (
	ID int IDENTITY(1,1) NOT NULL,
	TX_WORKBENCH_KEY VARCHAR(100),
	TX_WORKBENCH_NAME varchar(100),
	ID_USER int,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='INFRA_SERVICE_TYPE' and xtype='U')
CREATE TABLE INFRA_SERVICE_TYPE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_INFRA_SRVC_TYPE VARCHAR(100),
	PRIMARY KEY (ID)
);

IF NOT EXISTS(SELECT * FROM INFRA_SERVICE_TYPE WHERE TX_INFRA_SRVC_TYPE='OS')
INSERT INTO INFRA_SERVICE_TYPE (TX_INFRA_SRVC_TYPE) VALUES ('OS');
IF NOT EXISTS(SELECT * FROM INFRA_SERVICE_TYPE WHERE TX_INFRA_SRVC_TYPE='Docker')
INSERT INTO INFRA_SERVICE_TYPE (TX_INFRA_SRVC_TYPE) VALUES ('Docker');
IF NOT EXISTS(SELECT * FROM INFRA_SERVICE_TYPE WHERE TX_INFRA_SRVC_TYPE='Kubernetes')
INSERT INTO INFRA_SERVICE_TYPE (TX_INFRA_SRVC_TYPE) VALUES ('Kubernetes');



if not exists (select * from sysobjects where name='INFRA_TYPE' and xtype='U')
CREATE TABLE INFRA_TYPE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_INFRA_TYPE VARCHAR(100),
	PRIMARY KEY (ID)
);
IF NOT EXISTS(SELECT * FROM INFRA_TYPE WHERE TX_INFRA_TYPE='AWS')
INSERT INTO INFRA_TYPE (TX_INFRA_TYPE) VALUES ('AWS');
IF NOT EXISTS(SELECT * FROM INFRA_TYPE WHERE TX_INFRA_TYPE='GCP')
INSERT INTO INFRA_TYPE (TX_INFRA_TYPE) VALUES ('GCP');
IF NOT EXISTS(SELECT * FROM INFRA_TYPE WHERE TX_INFRA_TYPE='AZURE')
INSERT INTO INFRA_TYPE (TX_INFRA_TYPE) VALUES ('AZURE');

if not exists (select * from sysobjects where name='CLOUD_VPC' and xtype='U')
CREATE TABLE CLOUD_VPC (
	ID int IDENTITY(1,1) not null,
	ID_INFRA_TYPE int not null,
	ID_VPC_KEY varchar(50),
	TX_VPC_NAME varchar(100),
	FL_DEFAULT bit,
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='CLOUD_NACL' and xtype='U')
CREATE TABLE CLOUD_NACL (
	ID int IDENTITY(1,1) not null,
	ID_CLOUD_VPC int,
	TX_NACL_NAME varchar(100),
	TX_NACL_KEY varchar(100),
	FL_DEFAULT bit,
	ID_INFRA_TYPE int,
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='ROUTE_TABLE' and xtype='U')
CREATE TABLE ROUTE_TABLE (
	ID int IDENTITY(1,1) not null,
	ID_CLOUD_VPC int,
	TX_ROUTE_TABLE_NAME varchar(100),
	TX_ROUTE_TABLE_KEY varchar(100),
	FL_DEFAULT bit,
	ID_INFRA_TYPE int,
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='CLOUD_SECURITY_GROUP' and xtype='U')
CREATE TABLE CLOUD_SECURITY_GROUP (
	ID int IDENTITY(1,1) not null,
	ID_CLOUD_VPC int,
	TX_SECURITY_GROUP_NAME varchar(100),
	TX_SECURITY_GROUP_KEY varchar(100),
	FL_DEFAULT bit,
	ID_INFRA_TYPE int,
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='CLOUD_SUBNET' and xtype='U')
CREATE TABLE CLOUD_SUBNET (
	ID int IDENTITY(1,1) not null,
	ID_CLOUD_VPC int,
	TX_SUBNET_NAME VARCHAR(100),
	TX_SUBNET_KEY varchar(100),
	FL_DEFAULT bit,
	ID_INFRA_TYPE int,
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='CLOUD_COMPUTE_EC2' and xtype='U')
CREATE TABLE CLOUD_COMPUTE_EC2 (
	ID int IDENTITY(1,1) not null,
	ID_CLOUD_VPC int,
	TX_CLOUD_COMPUTE_NAME VARCHAR(100),
	TX_CLOUD_COMPUTE_KEY varchar(100),
	TX_ID_AMI varchar(100),
	TX_IP varchar(25),
	FL_DEFAULT bit,
	FL_STATUS bit,
	ID_SUBNET int,
	ID_SEC_GROUP int,
	ID_INFRA_TYPE int,
	PRIMARY KEY(ID)
);

if not exists (select * from sysobjects where name='CLOUD_RULES' and xtype='U')
CREATE TABLE CLOUD_RULES (
	ID int IDENTITY(1,1) NOT NULL,
	TX_NAME varchar(50),
	ID_TOOL int,
	ID_VPC int,
	ID_NACL int,
	ID_ROUTE_TABLE int,
	ID_SEC_GROUP int,
	ID_SUBNET int,
	ID_INFRA_TYPE int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='LAB_SERVICE' and xtype='U')
CREATE TABLE LAB_SERVICE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_LAB_SRVC_KEY VARCHAR(50),
	TX_INFRA_TYPE VARCHAR(100),
	ID_INFRASTRUCTURE int,
	ID_INFRA_SRVC_TYPE int,
	ID_SERVICE_TOOL int,
	TX_PORT VARCHAR(10),
	TX_ID_CONTAINER VARCHAR(100),
	FL_SERVICE_STATUS bit,
	TX_SERVICE_URL NVARCHAR(max),
	ID_USER_WORKBENCH int,
	ID_USER int,
	FL_INITIALIZED bit,
	TS_TIMESTAMP_CREATE varchar(50),
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='JOB_QUEUE' and xtype='U')
CREATE TABLE JOB_QUEUE (
	ID int IDENTITY(1,1) NOT NULL,
	TX_JOB_TYPE VARCHAR(50),
	ID_JOB_TYPE int,
	TX_JOB_TABLE VARCHAR(100),
	TX_JOB_KEY VARCHAR(50),
	TX_JOB_OPERATION VARCHAR(50),
	TX_JOB_STATUS VARCHAR(50),
	TS_TIMESTAMP_CREATE varchar(50),
	ID_USER int,
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='LAB_SERVICE_INFRASTRUCTURE' and xtype='U')
CREATE TABLE LAB_SERVICE_INFRASTRUCTURE (
	ID int IDENTITY(1,1) NOT NULL,
	ID_CLOUD_COMPUTE int,
	ID_LAB_SERVICE int,
	FL_STATUS bit,
	FL_INITIALIZED bit,
	TS_TIMESTAMP_CREATE varchar(50),
	PRIMARY KEY (ID)
);

if not exists (select * from sysobjects where name='USER_SERVICE_STATUS' and xtype='U')
CREATE TABLE USER_SERVICE_STATUS (
	ID int IDENTITY(1,1) NOT NULL,
	TX_SRVC_KEY VARCHAR(50),
	TX_STATUS NVARCHAR(MAX),
	ID_ORDER int,
	FL_INIT bit,
	FL_COMPLETE bit,
	TS_COMPLETE VARCHAR(15),
	FL_ERROR bit,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='LAB_SERVICE_TOOL_CONFIG' and xtype='U')
CREATE TABLE LAB_SERVICE_TOOL_CONFIG (
	ID int IDENTITY(1,1) NOT NULL,
	ID_LAB_SRVC int,
	ID_CONFIG int,
	TX_CONFIG NVARCHAR(MAX),
	TX_RESULT NVARCHAR(MAX),
	FL_CONFIG_RESULT bit,
	PRIMARY KEY (ID)
);


if not exists (select * from sysobjects where name='TECHNICAL_COORDINATOR' and xtype='U')
CREATE TABLE TECHNICAL_COORDINATOR (
	ID int IDENTITY(1,1) NOT NULL,
	ID_USER_COORDINATOR int not null,
	ID_USER_ACCOUNT int not null,
	PRIMARY KEY (ID)
);