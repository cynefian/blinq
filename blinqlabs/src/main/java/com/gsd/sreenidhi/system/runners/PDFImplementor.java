package com.gsd.sreenidhi.system.runners;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Base64;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;

import org.springframework.util.ResourceUtils;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PDFImplementor {
	
	static Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
	static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
 	static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
 	static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
 	static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
 	static Font blueFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.NORMAL, BaseColor.BLUE);
 	static Font grayFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.GRAY);
 	
 	
	public static void main(String[] args) throws FileNotFoundException, IOException {
		  Document document = new Document();
		    ByteArrayOutputStream out = new ByteArrayOutputStream();
		    PdfWriter writer;
          try {
              writer = PdfWriter.getInstance(document, out);
              document.open();
	            addMetaData(document);
	            addTitlePage(document, "email@email.com");
	            addInfoPage(document);
	            addContent(document);
	            document.close();
          } catch (Exception e) {
          	e.printStackTrace();
          }
          
          String data = Base64.getEncoder().encodeToString(out.toByteArray());
          String encodedAttachment = "data:application/pdf;base64,"+Base64.getEncoder().encodeToString(out.toByteArray());
         // byte[] data = Base64.getDecoder().decode(encodedAttachment.getBytes());
          byte[] enc = Base64.getEncoder().encode(out.toByteArray());
          try (OutputStream stream = new FileOutputStream("C:/blinqlabs/abc.pdf")) {
              stream.write(Base64.getDecoder().decode(enc));
          }
          
	}
	
	  private static void addMetaData(Document document) {
          document.addTitle("Monthly Report");
          document.addSubject("Entitlement Report");
          document.addKeywords("Java, PDF, iText");
          document.addAuthor("Blinqlabs");
          document.addCreator("Blinqlabs");
      }
    
	  private static void addTitlePage(Document document, String account)
	            throws DocumentException {
	       
		  Paragraph main = new Paragraph();
		  main.setAlignment(Element.ALIGN_CENTER);
	        
		   Image img = null;
			try {
				//img = Image.getInstance(fetchURLProperties()+"/resources/img/logos/white-logo-only.png");
				img = Image.getInstance(fetchURLProperties()+"/resources/images/report/report-cover.png");
			} catch (BadElementException | IOException e) {
				e.printStackTrace();
			}
			if(img!=null) {
				img.scalePercent(90f);
				main.add(img);
				main.setAlignment(Element.ALIGN_CENTER);
				addEmptyLine(main, 1);
			}
		
	        
		  
	        Paragraph preface = new Paragraph();
	        preface.setAlignment(Paragraph.ALIGN_CENTER);
	        
	        addEmptyLine(main, 5);
	        
	        Paragraph title = new Paragraph("Entitlement Report", titleFont);
	        title.setAlignment(Element.ALIGN_CENTER);
	        
	        preface.add(title);

	        addEmptyLine(preface, 4);
	        // Will create: Report generated by: _name, _date
	        preface.add(new Paragraph("Report Date: " + new Date(), smallBold));
	        preface.add(new Paragraph("Account: " + account, smallBold));
	        addEmptyLine(preface, 10);
	       

	        Paragraph link = new Paragraph("https://blinqlabs.com", blueFont);
	        link.setAlignment(Paragraph.ALIGN_CENTER);
	        
	        preface.add(link);
	        preface.setAlignment(Element.ALIGN_CENTER);
			
	        document.add(main);
	        document.add(preface);
	        document.newPage();
	        
	        
	        Paragraph note = new Paragraph("This is an automated report. Please contact support if you have any concerns.",grayFont);
	        note.setAlignment(Paragraph.ALIGN_CENTER);
	        document.add(note);
	        document.newPage();
	    }

	    private static void addContent(Document document) throws DocumentException {
	    	
	    	Paragraph preface = new Paragraph();
	        preface.setAlignment(Paragraph.ALIGN_CENTER);
	        preface.add(new Paragraph("Worklog", catFont));

	        // add a table
	        createTable(document);
	    }

	    private static void addInfoPage(Document document) throws DocumentException {
	    	
	    	 	Paragraph preface = new Paragraph();
		        preface.setAlignment(Paragraph.ALIGN_LEFT);
		        // We add one empty line
		        addEmptyLine(preface, 1);
		        // Lets write a big header
		        preface.add(new Paragraph("Hour Usage: 0" , smallBold));
		        addEmptyLine(preface, 1);
		        preface.add(new Paragraph("Current Tier: 0" , smallBold));
		        addEmptyLine(preface, 1);
		        preface.add(new Paragraph("Tier Rate: $0" , smallBold));
		        addEmptyLine(preface, 2);
		        
		        	preface.add(new Paragraph("Balance Hours from Tier: " + 0 + " hours " + 0 + "mins", smallBold));
		        
		        addEmptyLine(preface, 3);
		        
		        preface.add(new Paragraph("", redFont));
		        try {
					document.add(preface);
				} catch (DocumentException e) {
					e.printStackTrace();
				}

		        
		        preface = new Paragraph();
		        preface.setAlignment(Paragraph.ALIGN_CENTER);
		        PdfPTable table = new PdfPTable(3);

		        // t.setBorderColor(BaseColor.GRAY);
		        // t.setPadding(4);
		        // t.setSpacing(4);
		        // t.setBorderWidth(1);

		        PdfPCell c1 = new PdfPCell(new Phrase("Tier Name"));
		        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		        table.addCell(c1);

		        c1 = new PdfPCell(new Phrase("Rate"));
		        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		        table.addCell(c1);

		        c1 = new PdfPCell(new Phrase("Limit(s)"));
		        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		        table.addCell(c1);
		        table.setHeaderRows(1);

		        for(int i=0;i<5;i++) {
		        	table.addCell("A"+i);
		        	table.addCell("B"+i);
		        	table.addCell("C"+i);
		        }

		        document.add(table);
		        
		        // Start a new page
		        document.newPage();
	    	
	    }
	    
	    private static void createTable(Document document)
	            throws DocumentException {
	        PdfPTable table = new PdfPTable(3);

	        // t.setBorderColor(BaseColor.GRAY);
	        // t.setPadding(4);
	        // t.setSpacing(4);
	        // t.setBorderWidth(1);

	        PdfPCell c1 = new PdfPCell(new Phrase("Date"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);

	        c1 = new PdfPCell(new Phrase("Ticket"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);

	        c1 = new PdfPCell(new Phrase("Log"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);
	        
	        c1 = new PdfPCell(new Phrase("Description"));
	        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	        table.addCell(c1);
	        table.setHeaderRows(1);

	        
	        for (int i=0;i<5;i++) {
	        	table.addCell("MM/dd/yyyy");
	        	table.addCell("#");
	        	table.addCell("0h 0m");
	        	table.addCell("sample");
	        }
	        
	        document.add(table);

	    }

	    private static void addEmptyLine(Paragraph paragraph, int number) {
	        for (int i = 0; i < number; i++) {
	            paragraph.add(new Paragraph(" "));
	        }
	    }
	    
	    public static String fetchURLProperties() {
			
			String baseUrl = "";
			Properties properties = new Properties();
			try {
				File file = ResourceUtils.getFile("classpath:application.properties");
				InputStream in = new FileInputStream(file);
				properties.load(in);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			if(properties!=null) {
				baseUrl =  properties.getProperty("application.url");
			}
			return baseUrl;
		}
}
